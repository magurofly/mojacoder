schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Playground {
  code: String! @aws_cognito_user_pools
  lang: String! @aws_cognito_user_pools
  sessionID: ID! @aws_cognito_user_pools
  stdin: String! @aws_cognito_user_pools
  userID: ID! @aws_cognito_user_pools
}

type User {
  userID: ID!
  screenName: String!
  problem(id: ID!): Problem
  problems(nextToken: String): ProblemConnection!
}

enum ProblemStatus {
  PENDING
  NORMAL
  FAILED
}

type ProblemConnection {
	items: [Problem]
	nextToken: String
}

type Problem {
  id: ID! @aws_cognito_user_pools @aws_api_key
  userID: String! @aws_cognito_user_pools @aws_api_key
  datetime: Int! @aws_cognito_user_pools @aws_api_key
  status: ProblemStatus! @aws_cognito_user_pools @aws_api_key
  title: String @aws_cognito_user_pools @aws_api_key
  statement: String @aws_cognito_user_pools @aws_api_key
  submissions(nextToken: String, userID: ID): SubmissionConnection!
}

type SubmissionConnection {
  items: [Submission]
  nextToken: String
}

type Submission {
  id: ID!
  problemID: ID!
  userID: ID!
  datetime: AWSDateTime!
  lang: String!
}

type Mutation {
  responsePlayground(input: ResponsePlaygroundInput!): ResponsePlayground! @aws_iam
  runPlayground(input: RunPlaygroundInput!): Playground @aws_cognito_user_pools
  postProblem: Problem! @aws_cognito_user_pools
  submitCode(input: SubmitCodeInput!): Submission! @aws_cognito_user_pools
}

type ResponsePlayground {
  exitCode: Int! @aws_cognito_user_pools @aws_iam
  memory: Int! @aws_cognito_user_pools @aws_iam
  sessionID: ID! @aws_cognito_user_pools @aws_iam
  stderr: String! @aws_cognito_user_pools @aws_iam
  stdout: String! @aws_cognito_user_pools @aws_iam
  time: Int! @aws_cognito_user_pools @aws_iam
  userID: ID! @aws_cognito_user_pools @aws_iam
}

type Query {
  user(userID: ID, username: String): User
}

type Subscription {
  onResponsePlayground(sessionID: ID!, userID: ID!): ResponsePlayground @aws_cognito_user_pools @aws_subscribe(mutations : ["responsePlayground"])
}

input ResponsePlaygroundInput {
  exitCode: Int!
  memory: Int!
  sessionID: ID!
  stderr: String!
  stdout: String!
  time: Int!
  userID: ID!
}

input RunPlaygroundInput {
  code: String!
  lang: String!
  sessionID: ID!
  stdin: String!
}

input SubmitCodeInput {
  problemID: ID!
  lang: String!
  code: String!
}
